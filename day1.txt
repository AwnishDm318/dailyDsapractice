Question 1)
problem from: Striver SDE sheet
set-matrix-zero
source:-> leetCode
Link for solution and question :-> https://leetcode.com/problems/set-matrix-zeroes/
Time complexity of my solutin is O(2*(n*m))
Space complexity for this problems is O(1)

Question 2)
problem from: Striver SDE sheet
pascal triangle 2
link for question and solution is :-> https://leetcode.com/problems/pascals-triangle/submissions/
Time complexity of soution is o(n*n)
sapce complexity is o(n);

Question 3)
problem from: Striver SDE sheet
Next permutation
link for question and solution is :-> https://leetcode.com/problems/next-permutation/
Time complexity of soution is o(n+n+n)
sapce complexity is o(1);

Question 4)
problem from: Striver SDE sheet
Maximum sub array
source:-> Leet code
link for question and solution is :-> https://leetcode.com/problems/maximum-subarray/
Time complexity of soution is o(n)
sapce complexity is o(1);
algorithm: Kadane's algorithm

Question 5)
problem from: Striver SDE sheet
Sort color
source:-> Leet code
link for question and solution is :-> https://leetcode.com/problems/sort-colors/
Time complexity of soution is o(n^2)
sapce complexity is o(1);

Question 6)
problem from: Striver SDE sheet
Buy stock and sale stock
source:-> Leet code
link for question and solution is :-> https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
Time complexity of soution is o(n)
sapce complexity is o(1);

Question 7)
problem from: Question of the day
Convert sorted array to binary search tree
source:-> Leet code
link for question and solution is :-> https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/
Time complexity of soution is o(logn)
sapce complexity is o(n);

practicing merge sort 
 here is the code of merge sort()
///........................////////////////////////
#include <cstdio>
#include <vector>
#include <iostream>
#include <vector>
using namespace std;
void merge(int arr[],int l,int mid,int r)
{
    int b[r];
    int i=l, j=mid+1,k=l;
    while(i<=mid&&j<=r){
        if(arr[i]<=arr[j])
        {
            b[k]=arr[j];
            j++;
        }
        else{
            b[k]=arr[i];
            i++;
        }
        k++;
    }
    if(i>mid)
    {
        while(j<=r)
        {
          b[k]=arr[j];
          j++;
          k++;
        }
    }
    else{
        while(i <=mid)
        {
          b[k]=arr[i];
          i++;
          k++;
        }
    }
    for(int k=l;k<=r;k++)
       arr[k]=b[k];  
  
}
void mergeSort(int arr[],int l,int r)
{
    if(l<r){
       int mid=(l+r)/2;
        mergeSort(arr,l,mid);
        mergeSort(arr,mid+1,r);
        merge(arr,l,mid,r);
        
    }
    return ;
}
int main(){
    int arr[]={8,5,9,2,3,4,1};
    int size=sizeof(arr)/sizeof(arr[0]);
   mergeSort(arr,0,size);
    cout<<"Print"<<endl;
  for(int i=0;i<size;i++){
    cout<<arr[i]<<" ";
  }
    
    return 0;
}
